/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800  // 600, 1200
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener {
            precisionnav {
                    layers = <1>;
                    input-processors = <&zip_xy_scaler 1 3>;
            };
            precisionnum {
                    layers = <2>;
                    input-processors = <&zip_xy_scaler 1 2>;
            };
        };
/ {
    behaviors {
        mmv {
            acceleration-exponent = <2>; // 1
            time-to-max-speed-ms = <40>; // 40
            delay-ms = <0>; // 0
        }; 

        mo_tog: mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        sk_mo: sk_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_MO";
            bindings = <&mo>, <&skq>;

            #binding-cells = <2>;
            tapping-term-ms = <100>; // 150
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        langswitchcombo {
            bindings = <&kp LG(SPACE)>;
            key-positions = <3 13>;
            layers = <0>;
        };

        minuscombo {
            bindings = <&kp MINUS>;
            key-positions = <26 27>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        undercombo {
            bindings = <&kp UNDER>;
            key-positions = <27 28>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        tabcombo {
            bindings = <&kp TAB>;
            key-positions = <6 16>;
            layers = <0>;
        };

        capslock {
            bindings = <&kp CAPS>;
            key-positions = <22 23>;
            layers = <0>;
        };

        nextsym {
            bindings = <&sl 3>;
            key-positions = <7 17>;
            layers = <0>;
        };

        togmouse {
            bindings = <&tog 4>;
            key-positions = <0 10 20>;
            layers = <0 4>;
        };

        tognav {
            bindings = <&tog 1>;
            key-positions = <9 19 29>;
            layers = <0 1>;
        };

        nextnum {
            bindings = <&sl 2>;
            key-positions = <2 12>;
            layers = <0>;
        };

        symLeft01 {
            bindings = <&kp BSLH>;
            key-positions = <10 11>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
        symLeft02 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <11 12>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
        symLeft03 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
        symLeft04{
            bindings = <&kp LEFT_BRACE>;
            key-positions = <13 14>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
        symRight01 {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <15 16>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
        symRight02 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
        symRight03 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <17 18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
        symRight04 {
            bindings = <&kp SLASH>;
            key-positions = <18 19>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
        symUp01 {
            bindings = <&kp LESS_THAN>;
            key-positions = <2 3>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };    
        symUp02 {
            bindings = <&kp GREATER_THAN>;
            key-positions = <6 7>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };   
        symUp03 {
            bindings = <&kp PIPE>;
            key-positions = <1 2>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };  
        symUp04 {
            bindings = <&kp EQUAL>;
            key-positions = <7 8>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };  
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "Base";
            bindings = <
  &kp Q  &kp W  &kp F      &kp P        &kp B                  &kp J        &kp L            &kp U      &kp Y    &kp SQT
  &kp A  &kp R  &kp S      &kp T        &kp G                  &kp M        &kp N            &kp E      &kp I    &kp O
  &kp Z  &kp X  &kp C      &kp D        &kp V                  &kp K        &kp H            &kp COMMA  &kp DOT  &kp SEMI
                &lt 6 ESC  &lt 1 SPACE  &sk_mo 2 LEFT_SHIFT    &lt 3 ENTER  &lt 4 BACKSPACE  &lt 5 DEL
            >;
        };

        nav {
            display-name = "NAV";
            bindings = <
  &kp LGUI   &kp LALT      &kp LCTRL  &kp LSHFT       &none        &kp INS        &kp HOME      &kp UP        &kp END    &kp PG_UP
  &sk LGUI   &sk LALT      &sk LCTRL  &sk LSHFT       &kp TAB      &kp CAPS       &kp LEFT      &kp DOWN      &kp RIGHT  &kp PG_DN
  &kp LC(Z)  &kp LC(X)     &kp LC(C)  &kp LC(V)       &kp LC(Y)    &none          &kp K_APP     &kp LA(SPACE) &none      &none
                           &kp ESC    &kp SPACE       &kp ENTER    &kp LG(SPACE)  &kp LC(BSPC)  &kp LC(DEL)
            >;
        };

        num {
            display-name = "NUM";
            bindings = <
  &kp LGUI   &kp LALT       &kp LCTRL         &kp LSHFT      &kp LA(LS(TAB))    &kp KP_EQUAL     &kp N7         &kp N8         &kp N9  &kp C_AL_CALC 
  &sk LGUI   &sk LALT       &sk LCTRL         &sk LSHFT      &kp LA(LA(V))      &kp KP_MULTIPLY  &kp N4         &kp N5         &kp N6  &kp N0
  &kp LG(Z)  &kp LA(EQUAL)  &kp LC(NUMBER_1)  &kp LC(LS(V))  &kp LA(TAB)        &kp KP_DIVIDE    &kp N1         &kp N2         &kp N3  &kp PRCNT
                            &kp ESC           &kp SPACE      &none              &kp KP_PLUS      &kp KP_MINUS   &kp BACKSPACE
            >;
        };

        sym {
            display-name = "SYM";
            bindings = <
  &kp GRAVE         &kp AMPERSAND         &kp STAR               &kp CARET          &kp EQUAL      &kp UNDER        &kp RSHFT          &kp RCTRL        &kp LALT      &kp RGUI
  &kp EXCL          &kp AT                &kp HASH               &kp DOLLAR         &kp PERCENT    &kp TAB          &sk RSHFT          &sk RCTRL        &sk LALT      &sk RGUI
  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp MINUS      &kp LEFT_BRACE   &kp PIPE           &kp RIGHT_BRACE  &kp RALT      &kp LG(L)
                                          &kp BSLH               &kp QUESTION       &kp SLASH      &none            &kp LC(BACKSPACE)  &kp LC(DEL)
            >;
        };

        mouse {
            display-name = "MSE";
            bindings = <
  &msc SCRL_UP    &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &mkp MB4         &kp LS(LG(D))  &kp RSHFT        &kp RCTRL  &kp LALT      &kp RGUI
  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5         &kp LG(LS(S))  &sk RSHFT        &sk RCTRL  &sk LALT      &sk RGUI
  &kp LC(W)       &kp LC(L)       &kp LC(R)       &kp LC(T)        &kp LC(LS(T))    &kp LS(LG(T))  &mo 2            &mo 1      &kp RALT      &kp LA(F4)
                                  &mkp MCLK       &mkp LCLK        &mkp RCLK        &kp ENTER      &kp BSPC         &kp DEL
            >;
        };

        fun {
            display-name = "FUN";
            bindings = <
  &kp F12  &kp F7  &kp F8     &kp F9       &kp PAUSE_BREAK    &none      &kp RSHFT        &kp RCTRL  &kp LALT      &kp RGUI
  &kp F11  &kp F4  &kp F5     &kp F6       &kp PRINTSCREEN    &none      &sk RSHFT        &sk RCTRL  &sk LALT      &sk RGUI
  &kp F10  &kp F1  &kp F2     &kp F3       &kp SLCK           &none      &none            &none      &kp RALT      &kp LC(LS(ESC))
                   &kp K_APP  &kp LA(F11)  &kp LA(F12)        &kp ENTER  &kp BSPC         &none
            >;
        };

        blt {
            display-name = "BLT";
            bindings = <
  &sk LEFT_GUI  &sk LEFT_ALT  &sk LCTRL  &sk LEFT_SHIFT  &bootloader    &bt BT_CLR        &none         &none         &none         &none
  &kp LGUI      &kp LALT      &kp LCTRL  &kp LSHFT       &none          &none             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
  &none         &kp RALT      &none      &none           &none          &kp LG(LA(K))     &kp C_VOL_UP  &kp C_VOL_DN  &none         &bt BT_SEL 4
                              &none      &kp SPACE       &kp LA(TAB)    &kp C_PLAY_PAUSE  &kp C_PREV    &kp C_NEXT
            >;
        };
    };
};
